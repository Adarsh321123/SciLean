-- import SciLean.Data.ArrayType.Notation
import SciLean.Data.ArrayType.GenericArrayTypeProperties

namespace SciLean
namespace GenericArrayType
section LinearGenericArrayType

variable {Cont : USize ‚Üí Type} {Elem : Type |> outParam}
variable [LinearGenericArrayType Cont Elem]

------------------------------------------------------------------------------
-- dropElem
--------------------------------------------------------------------------------

function_properties SciLean.DropElem.dropElem
  {Cont : Nat ‚Üí Type} {Elem : Type |> outParam} [LinearGenericArrayType Cont Elem] Vec Elem]
  {n : Nat} (k : Nat) (cont : Cont (n+k))
argument cont
  IsLin := sorry_proof,
  IsSmooth := sorry_proof,
  abbrev ‚àÇ := Œª dcont => dropElem k dcont by sorry_proof,
  abbrev ùíØ := Œª dcont => (dropElem k cont, dropElem k dcont) by sorry_proof

function_properties SciLean.DropElem.dropElem
  {Cont : Nat ‚Üí Type} {Elem : Type |> outParam} [LinearGenericArrayType Cont Elem] SemiHilbert Elem]
  {n : Nat} (k : Nat) (cont : Cont (n+k))
argument cont
  HasAdjoint := sorry_proof,
  abbrev ‚Ä† := Œª cont' => pushElem k 0 cont' by sorry_proof,
  HasAdjDiff := by sorry_proof,
  abbrev ‚àÇ‚Ä† := Œª dcont' => pushElem k 0 dcont' by sorry_proof,
  abbrev ‚Ñõ := (dropElem k cont, Œª dcont' => pushElem k 0 dcont') by sorry_proof


--------------------------------------------------------------------------------
-- pushElem
--------------------------------------------------------------------------------

function_properties SciLean.PushElem.pushElem
  {Cont : Nat ‚Üí Type} {Elem : Type |> outParam} [LinearGenericArrayType Cont Elem] Vec Elem]
  {n : Nat} (k : Nat) (elem : Elem) (cont : Cont n)
argument (elem, cont)
  IsLin := sorry_proof,
  IsSmooth := sorry_proof,
  abbrev ‚àÇ := Œª delem dcont => pushElem k delem dcont by sorry_proof,
  abbrev ùíØ := Œª delem dcont => (pushElem k elem cont, pushElem k delem dcont) by sory_proof
argument cont
  IsLin [Fact (elem=0)] := sorry_proof,
  IsSmooth := sorry_proof,
  abbrev ‚àÇ := Œª dcont => pushElem k 0 dcont by sorry_proof,
  abbrev ùíØ := Œª dcont => (pushElem k elem cont, pushElem k 0 dcont) by sorry_proof
argument elem
  IsLin [Fact (cont=0)] := sorry_proof,
  IsSmooth := sorry_proof,
  abbrev ‚àÇ := Œª delem => pushElem k delem 0 by sorry_proof,
  abbrev ùíØ := Œª delem => (pushElem k elem cont, pushElem k delem 0) by sorry_proof

function_properties SciLean.PushElem.pushElem
  {Cont : Nat ‚Üí Type} {Elem : Type |> outParam} [LinearGenericArrayType Cont Elem] SemiHilbert Elem]
  {n : Nat} (k : Nat) (elem : Elem) (cont : Cont n)
argument (elem, cont)
  HasAdjoint := sorry_proof,
  abbrev ‚Ä† := Œª elemcont' => (‚àë i : Fin k, elemcont'[‚ü®n+i.1, sorry_proof‚ü©], dropEle k elemcont') by sorry_proof,
  HasAdjDiff := sorry,
  abbrev ‚àÇ‚Ä† := Œª delemcont' => (‚àë i : Fin k, delemcont'[‚ü®n+i.1, sorry_proof‚ü©], droplem k delemcont') by sorry_proof
argument cont
  HasAdjoint [Fact (elem=0)] := sorry_proof,
  abbrev ‚Ä† [Fact (elem=0)] := Œª cont' => dropElem k cont' by sorry_proof,
  HasAdjDiff := sorry,
  abbrev ‚àÇ‚Ä† := Œª dcont' => dropElem k dcont' by sorry_proof
argument elem
  HasAdjoint [Fact (cont=0)] := sorry_proof,
  abbrev ‚Ä† [Fact (cont=0)] := Œª elem' => ‚àë i : Fin k, elem'[‚ü®n+i.1, sorry_proof‚ü©] b sorry_proof,
  HasAdjDiff := sorry,
  abbrev ‚àÇ‚Ä† := Œª delem' => ‚àë i : Fin k, delem'[‚ü®n+i.1, sorry_proof‚ü©] by sorry_proof
