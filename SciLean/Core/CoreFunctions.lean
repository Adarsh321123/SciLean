import SciLean.Core.FunctionProperties


namespace SciLean

--------------------------------------------------------------------------------
-- Core bootstrapping theorems
--------------------------------------------------------------------------------

instance IsLin_is_IsSmooth {X Y : Type} {Xs Y' : Type} [Vec Xs] [Vec Y'] 
  (n : Nat) (f : X ‚Üí Y) [Prod.Uncurry n (X ‚Üí Y) Xs Y'] [inst : IsLinN n f] 
  : IsSmoothN n f := IsSmoothN.mk (toIsSmoothNT:=‚ü®inst.proof.2‚ü©)

@[diff] 
theorem diff_of_linear {X Y} [Vec X] [Vec Y] (f : X ‚Üí Y) [IsLin f]
  : ‚àÇ f = Œª _ dx => f dx := sorry_proof

@[diff] 
theorem diff_of_linear_2 {X Y Z} [Vec X] [Vec Y] [Vec Z] (f : X ‚Üí Y ‚Üí Z) [IsLinN 2 f]
  : ‚àÇ (uncurryN 2 f) = Œª _ (dx,dy) => f dx dy := sorry_proof

--------------------------------------------------------------------------------

function_properties Neg.neg {X} [Vec X] (x : X) : X
argument x
  isLin := sorry_proof, 
  isSmooth,
  abbrev ‚àÇ := - dx by symdiff
  -- abbrev ùíØ := (-x, -dx) by symdiff

function_properties Neg.neg {X} [SemiHilbert X] (x : X) : X
argument x
  hasAdjoint := sorry_proof, 
  abbrev ‚Ä† := - x' by sorry_proof,
  hasAdjDiff,
  abbrev ‚àÇ‚Ä† := - dx' by unfold adjointDifferential; symdiff; symdiff
  --abbrev ‚Ñõ := (-x, Œª dx' => - dx') by symdiff

--------------------------------------------------------------------------------

function_properties HAdd.hAdd {X} [Vec X]  (x y : X) : X
argument (x,y)
  isLin := sorry_proof,
  isSmooth,
  abbrev ‚àÇ := dx + dy by symdiff
argument x ..
  isSmooth := sorry_proof,
  def ‚àÇ := dx by sorry_proof
argument y
  isSmooth := sorry_proof,
  def ‚àÇ := dy by sorry_proof

function_properties HAdd.hAdd {X} [SemiHilbert X] (x y : X) : X
argument (x,y)
  hasAdjoint := sorry_proof,
  abbrev ‚Ä† := (xy',xy') by sorry_proof,
  hasAdjDiff := by apply HasAdjDiffN.mk'; symdiff; sorry_proof,
  abbrev ‚àÇ‚Ä† := (dxy', dxy') by unfold adjointDifferential; symdiff; symdiff
argument x 
  hasAdjDiff := sorry_proof,
  abbrev ‚àÇ‚Ä† := dx' by sorry_proof
argument y
  hasAdjDiff := sorry_proof,
  abbrev ‚àÇ‚Ä† := dy' by sorry_proof

--------------------------------------------------------------------------------

function_properties HSub.hSub {X} [Vec X]  (x y : X) : X
argument (x,y)
  isLin := sorry_proof,
  abbrev ‚àÇ := dx - dy by symdiff
argument x ..
  isSmooth := sorry_proof,
  def ‚àÇ := dx by sorry_proof
argument y
  isSmooth := sorry_proof,
  def ‚àÇ := -dy by sorry_proof

function_properties HSub.hSub {X} [SemiHilbert X] (x y : X) : X
argument (x,y)
  hasAdjoint := sorry_proof,
  hasAdjDiff := by apply HasAdjDiffN.mk'; symdiff; sorry_proof,
  abbrev ‚Ä† := (xy',-xy') by sorry_proof,
  abbrev ‚àÇ‚Ä† := (dxy', -dxy') by unfold adjointDifferential; symdiff; symdiff
argument x 
  hasAdjDiff := sorry_proof,
  abbrev ‚àÇ‚Ä† := dx' by sorry_proof
argument y
  hasAdjDiff := sorry_proof,
  abbrev ‚àÇ‚Ä† := -dy' by sorry_proof

--------------------------------------------------------------------------------

function_properties HMul.hMul {X} [Vec X] (x : ‚Ñù) (y : X) : X
argument (x,y)
  isSmooth := sorry_proof,
  abbrev ‚àÇ := dx*y + x*dy by sorry_proof
argument x ..
  isLin := sorry_proof, 
  isSmooth,
  def ‚àÇ := dx*y by sorry_proof
argument y
  isLin := sorry_proof, 
  isSmooth,
  def ‚àÇ := x*dy by sorry_proof

function_properties HMul.hMul {X} [SemiHilbert X] (x : ‚Ñù) (y : X) : X
argument y
  hasAdjoint := sorry_proof,
  abbrev ‚Ä† := x*y' by sorry_proof
  
function_properties HMul.hMul {X} [Hilbert X] (x : ‚Ñù) (y : X) : X
argument x
  hasAdjoint := sorry_proof,
  abbrev ‚Ä† := ‚ü™x',y‚ü´ by sorry_proof
argument (x,y)
  hasAdjDiff := by apply HasAdjDiffN.mk'; symdiff; sorry_proof,
  abbrev ‚àÇ‚Ä† := (‚ü™dxy',y‚ü´, x*dxy') by unfold adjointDifferential; symdiff; sorry_proof

--------------------------------------------------------------------------------

function_properties Inner.inner {X} [Hilbert X] (x y : X) : ‚Ñù
argument (x,y)
  isSmooth := sorry_proof,
  abbrev ‚àÇ := ‚ü™dx,y‚ü´ + ‚ü™x,dy‚ü´ by sorry_proof,
  hasAdjDiff := by apply HasAdjDiffN.mk'; symdiff; sorry_proof,
  abbrev ‚àÇ‚Ä† := (dxy'*x, dxy'*y) by sorry_proof
argument x ..
  isLin := sorry_proof,
  isSmooth, 
  abbrev ‚àÇ := ‚ü™dx,y‚ü´ by symdiff
argument x
  hasAdjoint := sorry_proof,
  abbrev ‚Ä† := x'*y by sorry_proof
argument y
  isLin := sorry_proof,
  isSmooth, 
  abbrev ‚àÇ := ‚ü™x,dy‚ü´ by symdiff,
  hasAdjoint := sorry_proof,
  abbrev ‚Ä† := y'*x by sorry_proof
