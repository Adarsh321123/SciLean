
* SciLean: Scientific computing assistant

  

  Framework for scientific computing such as solving differential equations, optimization or machine learning written in [[http://leanprover.github.io/][Lean]]. Lean is an expressive functional programming language that allows to formalize the mathematics behind these computations. This can offer several benefits:

    - Code transformation and optimization guided by formalization of underlining mathematics, like automatic differentiation, algebraic simplification, fine control of used approximations or execution scheduling.
    - First class symbolic computation. Any function can be purely symbolic, functions like `gradient`, `integral` or `limit` are inherently non-computable. However, they carry meaning what the program should be doing and we provide tools to manipulate them or approximate them with actually computable function.
    - Code generation based on formal specification. Many problems any scientific computing or machine learning can be stated very easily e.g. find a minimizer of a function. We then provide tools how to turn such specification into a runnable code satisfying the specification, usually in an appropriate limit of used approximations.
    - Catalogization of numerical methods.

  In short, mathematics is the ultimate abstraction for numerical computing and Lean can understand mathematics. Hopefully, using Lean will allow us to create really powerfull and extensible library for scientific computing.

*** Inspiration comes mainly from these languages

**** Mathematica
     Mathematica that at its hearth is a symbolic system with set of rewrite rules. Or system, because it formalizes mathematics, allows us to work also with symbolic representations of program but those rewrite rules can be conditioned on mathematical properties of those expressions involved

**** Halide
     Halide is a DSL language for computations over tensors, it popularized the split of what and how method. However, it is restricted to tensors, we aim to be data agnostic on the highest level and work with vector spaces or another algebraic data structures. Of course, specialized techniques for tensors, graphs or sparse voxel grids will be hopefully embedded inside of our framework at some point

**** Julia
     Julia is a promising new language for numerical computing. That unfortunately still lags behind the popularity of Python, but one of the big success of Julia is its meta programming ability, that provides unparalleled opportunity for code optimizations, like directly writing GPU kernels inside of Julia. We are using Lean, that is also its own meta language but we believe that the ability of formalizing mathematics will allow us guide write optimization automation beyond what is possible in Julia.
