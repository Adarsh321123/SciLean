import SciLean.Core.Differential
import SciLean.Core.IsSmoothDep

namespace SciLean

variable {X Y Z W Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} [Diff X] [Diff Y] [Diff Z] [Diff W] [Diff Y‚ÇÅ] [Diff Y‚ÇÇ] [Diff Y‚ÇÉ]
  {Œ± Œ≤ Œ≥ : Type} 

noncomputable 
def differentialDep (f : X ‚Üí Y) : (x : X) ‚Üí ùíØ[x] X ‚Üí ùíØ[f x] Y := sorry

noncomputable 
def tangentMapDep (f : X ‚Üí Y) : ùíØ X ‚Üí ùíØ Y := Œª ‚ü®x,dx‚ü© => ‚ü®f x, differentialDep f x dx‚ü©

noncomputable 
def tangentMapDep' (f : X ‚Üí Y) (x : X) (dx : ùíØ[x] X) : (Œ£' (y:Y) (dy : ùíØ[y] Y), (f x=y)) := ‚ü®f x, differentialDep f x dx, rfl‚ü©

instance(priority:=mid-1) (f : X ‚Üí Y) : Partial f (differentialDep f) := ‚ü®‚ü©
instance(priority:=mid-1) (f : X ‚Üí Y) : TangentMap f (tangentMapDep' f) := ‚ü®‚ü©


@[simp ‚Üì]
theorem differentialDep.of_id
  : ‚àÇ (Œª x : X => x) = Œª x dx => dx := sorry_proof

@[simp ‚Üì]
theorem differentialDep.of_const (x : X)
  : ‚àÇ (Œª y : Y => x) = Œª y dy => 0 := sorry_proof

@[simp ‚Üì low-3]
theorem differentialDep.of_swap (f : Œ± ‚Üí X ‚Üí Y) [‚àÄ i, IsSmoothDepT (f i)]
  : ‚àÇ (Œª x a => f a x) = Œª x dx a => ‚àÇ (f a) x dx := sorry_proof

@[simp ‚Üì low-1]
theorem differentialDep.of_comp
  (f : Y ‚Üí Z) [IsSmoothDepT f]
  (g : X ‚Üí Y) [IsSmoothDepT g]
  : ‚àÇ (Œª x => f (g x))
    =
    Œª x dx =>
      -- option 1:
      let yy := ùíØ g x dx
      let y := yy.1
      let dy := yy.2.1
      ‚àÇ f y dy
      -- option 2:
      -- let y := g x
      -- let dy := ‚àÇ g x dx
      -- have h : y = g x := by admit

      -- h ‚ñ∏ ‚àÇ f y dy
      -- option 3:
      -- ‚àÇ f (g x) (‚àÇ g x dx)
  := sorry_proof

@[simp ‚Üì low-2]
theorem differentialDep.of_diag
  (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  (g‚ÇÅ : X ‚Üí Y‚ÇÅ) [IsSmoothDepT g‚ÇÅ]
  (g‚ÇÇ : X ‚Üí Y‚ÇÇ) [IsSmoothDepT g‚ÇÇ]
  : ‚àÇ (Œª x => f (g‚ÇÅ x) (g‚ÇÇ x)) 
    = 
    Œª x dx => 
      let ‚ü®y‚ÇÅ,dy‚ÇÅ,h‚ÇÅ‚ü© := ùíØ g‚ÇÅ x dx
      let ‚ü®y‚ÇÇ,dy‚ÇÇ,h‚ÇÇ‚ü© := ùíØ g‚ÇÇ x dx 
      -- let y‚ÇÅ := g‚ÇÅ x
      -- let dy‚ÇÅ := ‚àÇ g‚ÇÅ x dx
      -- let y‚ÇÇ := g‚ÇÇ x
      -- let dy‚ÇÇ := ‚àÇ g‚ÇÇ x dx
      h‚ÇÅ ‚ñ∏ h‚ÇÇ ‚ñ∏ (‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ)
  := sorry_proof


@[simp ‚Üì low-5]
theorem differentialDep.of_uncurryN (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  : ‚àÇ (uncurryN 2 f) 
    =
    Œª (y‚ÇÅ,y‚ÇÇ) (dy‚ÇÅ,dy‚ÇÇ) =>
    ‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ
  := by admit

@[simp ‚Üì low]
theorem differentialDep.of_parm
  (f : X ‚Üí Œ± ‚Üí Y) [IsSmoothDepT f] (a : Œ±)
  : ‚àÇ (Œª x => f x a) = Œª x dx => ‚àÇ f x dx a := 
by
  rw[differentialDep.of_swap (Œª a x => f x a)]

@[simp ‚Üì]
theorem differentialDep.of_eval
  (a : Œ±)
  : ‚àÇ (Œª f : Œ± ‚Üí Y => f a) = Œª _ df => df a := by simp

@[simp ‚Üì]
theorem Prod.fst.arg_xy.diffDep_simp
  : ‚àÇ (Prod.fst : X√óY ‚Üí X) 
    =
    Œª xy dxy => dxy.1
  := sorry_proof

@[simp ‚Üì]
theorem Prod.snd.arg_xy.diffDep_simp
  : ‚àÇ (Prod.snd : X√óY ‚Üí Y) 
    =
    Œª xy dxy => dxy.2
  := sorry_proof

--------------------------------------------------------------------------------
-- Tangent Map Rules --
--------------------------------------------------------------------------------

@[simp ‚Üì]
theorem tangentMapDep.of_id
  : ùíØ (Œª x : X => x) = Œª x dx => ‚ü®x,dx,rfl‚ü©
  := by simp[tangentMapDep']; done

@[simp ‚Üì]
theorem tangentMapDep.of_const (x : X)
  : ùíØ (Œª y : Y => x) = Œª y dy => ‚ü®x,0,rfl‚ü©
  := by simp[tangentMapDep']; done

@[simp ‚Üì low-3]
theorem tangentMapDep.of_swap (f : Œ± ‚Üí X ‚Üí Y) [‚àÄ i, IsSmoothDepT (f i)]
  : ùíØ (Œª x a => f a x) = Œª x dx => ‚ü®Œª a => f a x, Œª a => ‚àÇ (f a) x dx, rfl‚ü©
  := by simp[tangentMapDep']; done

@[simp ‚Üì low-1]
theorem tangentMapDep.of_comp
  (f : Y ‚Üí Z) [IsSmoothDepT f]
  (g : X ‚Üí Y) [IsSmoothDepT g]
  : ùíØ (Œª x => f (g x)) 
    = 
    Œª x dx => 
      let ‚ü®y,dy,h‚ü© := ùíØ g x dx
      h ‚ñ∏ ùíØ f y dy
  := by simp[tangentMapDep']; done

@[simp ‚Üì low-2]
theorem tangentMapDep.of_diag
  (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  (g‚ÇÅ : X ‚Üí Y‚ÇÅ) [IsSmoothDepT g‚ÇÅ]
  (g‚ÇÇ : X ‚Üí Y‚ÇÇ) [IsSmoothDepT g‚ÇÇ]
  : ùíØ (Œª x => f (g‚ÇÅ x) (g‚ÇÇ x))
    = 
    Œª x dx => 
      let ‚ü®y‚ÇÅ,dy‚ÇÅ,h‚ÇÅ‚ü© := ùíØ g‚ÇÅ x dx 
      let ‚ü®y‚ÇÇ,dy‚ÇÇ,h‚ÇÇ‚ü© := ùíØ g‚ÇÇ x dx
      -- (f y‚ÇÅ y‚ÇÇ, ‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ)
      h‚ÇÅ ‚ñ∏ h‚ÇÇ ‚ñ∏ ùíØ (uncurryN 2 f) (y‚ÇÅ,y‚ÇÇ) (dy‚ÇÅ,dy‚ÇÇ)
  := by 
    funext x dx
    simp[tangentMapDep']
    done



/-- Last resort theorem that changes tangent map to normal differential 

Bilinear maps should usually provide a rewrite rule for `ùíØ (uncurryN 2 f)`
-/
@[simp ‚Üì low-5]
theorem tangentMapDep.of_uncurryN (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  : ùíØ (uncurryN 2 f) 
    =
    Œª  (y‚ÇÅ,y‚ÇÇ) (dy‚ÇÅ,dy‚ÇÇ) =>
    ‚ü®f y‚ÇÅ y‚ÇÇ, ‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ, rfl‚ü©
  := by 
    simp[tangentMapDep']
    done

@[simp ‚Üì low]
theorem tangentMapDep.of_parm
  (f : X ‚Üí Œ± ‚Üí Y) [IsSmoothDepT f] (a : Œ±)
  : ùíØ (Œª x => f x a) 
    = 
    Œª x dx => 
      let ‚ü®f',df',h‚ü© := ùíØ f x dx
      ‚ü®f' a, df' a, by rw[h]; done‚ü©
  := by simp[tangentMapDep']; done

@[simp ‚Üì]
theorem tangentMapDep.of_eval
  (a : Œ±)
  : ùíØ (Œª f : Œ± ‚Üí Y => f a) 
    = 
    Œª f df => 
      ‚ü®f a, df a, rfl‚ü©
  := by simp[tangentMapDep']; done

--------------------------------------------------------------------------------
