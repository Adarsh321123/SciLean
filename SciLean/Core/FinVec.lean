import SciLean.Core.Hilbert

namespace SciLean

class Basis (X : Type u) (Œπ : outParam $ Type v) (K : outParam $ Type w) where
  basis : Œπ ‚Üí X
  proj  : Œπ ‚Üí X ‚Üí K


namespace Basis

  instance : Basis ‚Ñù Unit ‚Ñù := 
  {
    basis := Œª _ => 1
    proj  := Œª _ x => x
  }

  macro:max "ùïñ" i:term : term => `(Basis.basis $i)

  instance {X Y Œπ Œ∫ K} [Basis X Œπ K] [Basis Y Œ∫ K] [Zero X] [Zero Y] : Basis (X √ó Y) (Œπ ‚äï Œ∫) K := 
  {
    basis := Œª i =>
      match i with
      | Sum.inl ix => (Basis.basis ix, 0)
      | Sum.inr iy => (0, Basis.basis iy)
    proj := Œª i x =>
      match i with
      | Sum.inl ix => proj ix x.1
      | Sum.inr iy => proj iy x.2
  }

end Basis

/--
 -/
class FinVec (X : Type) (Œπ : outParam Type) [outParam $ Enumtype Œπ] extends Hilbert X, Basis X Œπ ‚Ñù where
  is_basis : ‚àÄ x : X, x = ‚àë i : Œπ, Basis.proj i x * Basis.basis (X:=X) i
  -- TODO: add some condition that the basis vectors are linearly independent




instance : Basis ‚Ñù Unit ‚Ñù where
  basis _ := 1
  proj _ x := x

instance : FinVec ‚Ñù Unit where
  is_basis := sorry_proof
  

opaque foo {X} {Œπ : Type} [Enumtype Œπ] [FinVec X Œπ] (x : X) : X

set_option pp.all true in
#check foo (1 : ‚Ñù)
