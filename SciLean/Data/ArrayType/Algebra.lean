import SciLean.Data.ArrayType.Basic

namespace SciLean 
namespace GenericArrayType

variable {Cont : Type} {Idx : Type |> outParam} {Elem : Type |> outParam}
variable [GenericArrayType Cont Idx Elem] [Enumtype Idx] 

-- The above instance is giving problems in the following examples.
-- TOOD: investigate
example {X} [Vec X] : SMul ‚Ñù X := by infer_instance
-- This one can't be stated here, but gets messed up by the above instance
-- example : ‚àÄ (i : Idx), IsSmooth Œª (x : Cont) => ‚à•x[i]‚à•¬≤ := by infer_instance -- apply Œª

-- instance (priority := low) [AddCommGroup Elem] [DistribMulAction ‚Ñù Elem] : Vec Cont := Vec.mk
instance (priority := low) [Vec Elem] : Vec Cont := Vec.mkSorryProofs -- Vec.mk

instance (priority := low) [Inner Elem] : Inner Cont where
  inner := Œª f g => ‚àë x, ‚ü™f[x], g[x]‚ü´

instance (priority := low) [Vec Elem] [TestFunctions Elem] 
  : TestFunctions Cont where
  TestFun f := ‚àÄ x, TestFun (f[x])

instance (priority := low) [SemiHilbert Elem] 
  : SemiHilbert Cont := SemiHilbert.mkSorryProofs

instance (priority := low) [Hilbert Elem] 
  : Hilbert Cont where
  all_are_test := sorry_proof

instance (priority := low) {Œ∫} {_ : Enumtype Œ∫} [FinVec Elem Œ∫] : Basis Cont (Idx√óŒ∫) ‚Ñù where
  basis := Œª (i,j) => introElem Œª i' => [[i=i']] ‚Ä¢ ùïñ[Elem] j
  proj := Œª (i,j) x => ùï° j x[i]

instance (priority := low) {Œ∫} {_ : Enumtype Œ∫} [FinVec Elem Œ∫] : DualBasis Cont (Idx√óŒ∫) ‚Ñù where
  dualBasis := Œª (i,j) => introElem Œª i' => [[i=i']] ‚Ä¢ ùïñ'[Elem] j
  dualProj := Œª (i,j) x => ùï°' j x[i]

open BasisDuality in
instance (priority := low) {Œ∫} {_ : Enumtype Œ∫} [FinVec Elem Œ∫] : BasisDuality Cont where
  toDual   := GenericArrayType.map toDual
  fromDual := GenericArrayType.map fromDual

instance (priority := low) {Œ∫ : Type} {_ : Enumtype Œ∫} [FinVec Elem Œ∫] : FinVec Cont (Idx√óŒ∫) where
  is_basis := sorry_proof
  duality := by intro (i,j) (i',j'); simp[Inner.inner,Basis.basis, DualBasis.dualBasis]; sorry_proof
  to_dual := sorry_proof
  from_dual := sorry_proof




