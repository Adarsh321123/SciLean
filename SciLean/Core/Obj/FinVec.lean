import SciLean.Algebra

namespace SciLean

  class Basis (X : Type u) (Œπ : outParam $ Type v) (K : outParam $ Type w) where
    basis : Œπ ‚Üí X
    proj  : Œπ ‚Üí X ‚Üí K

  macro:max "ùîº" i:term : term => `(Basis.basis $i)

  /- Currently we assume that the basis for FinVec is orthonormal through out the codebase. 
     For example divergence assumes this.
     Is it safe to assume that the default basis is orthonormal? -/
  class FinVec (X : Type) (Œπ : outParam $ Type) [outParam $ Enumtype Œπ] extends Hilbert X, Basis X Œπ ‚Ñù  -- where 
    -- proj_inner : ‚àÄ (x : X) i, Basis.proj i x = ‚ü™Basis.basis i, x‚ü´
    -- sum_proj : ‚àÄ x : X, (‚àë i : Œπ, (Basis.proj i x) * (Basis.basis i : X)) = x
    -- orthonormality : ‚àÄ i j : Œπ, ‚ü™(Basis.basis i : X), (Basis.basis j : X)‚ü´ = if i=j then 1 else 0

  instance : Basis ‚Ñù Unit ‚Ñù :=
  {
    basis := Œª _ => 1
    proj  := Œª _ x => x
  }

  instance : FinVec ‚Ñù Unit := FinVec.mk
