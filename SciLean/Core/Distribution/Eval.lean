import SciLean.Core.Distribution.Basic
import SciLean.Core.Rand.Distributions.Uniform
import SciLean.Core.Rand.Distributions.UniformI

open MeasureTheory

namespace SciLean

variable
  {R} [RealScalar R]
  {X} [Vec R X] -- [TopologicalSpace X] [space : TCOr (Vec R X) (DiscreteTopology X)]
  {Y} [Vec R Y] [Module โ Y]
  {Z} [Vec R Z]
  {U} [Vec R U] [Module โ U]
  {V} [Vec R V] [Module โ V]
  {W} [Vec R W] [Module โ W]

set_default_scalar R

open Classical

@[distrib_eval]
theorem action_extAction (T : ๐' X) (ฯ : ๐ X) :
    T ฯ = T.extAction' ฯ := sorry_proof

@[simp,ftrans_simp]
theorem extAction_vecDirac (x : X) (ฯ : X โ Y)  (L : R โธ Y โธ Z) :
    (dirac x).extAction ฯ L
    =
    L 1 (ฯ x) := sorry_proof

@[simp,ftrans_simp]
theorem extAction_restrict_vecDirac (x : X) (A : Set X) (ฯ : X โ Y) (L : R โธ Y โธ Z) :
    ((dirac x).restrict A).extAction ฯ L
    =
    if x โ A then L 1 (ฯ x) else 0 := sorry_proof

    -- x.postComp (fun u => (y u).extAction ฯ) := by sorry_proof

@[action_push]
theorem postExtAction_postComp (x : ๐'(X,U)) (y : U โธ ๐'(Y,Z)) (ฯ : Y โ R) :
    (x.postComp y).postComp (โจfun T => T.extAction' ฯ, by unfold Distribution.extAction'; fun_propโฉ)
    =
    x.postComp (โจfun u => (y u).extAction' ฯ, by unfold Distribution.extAction'; fun_propโฉ) := by sorry_proof

variable [MeasureSpace X]

open Rand in
@[distrib_eval]
theorem function_toDistribution_eval (f : X โ Y) (A : Set X) (ฯ : X โ U) (L : Y โธ U โธ V) [UniformRand A] :
  (f.toDistribution.restrict A).extAction ฯ L
  =
  (uniform A).๐ผ fun x =>
    let V : R := Scalar.ofENNReal (volume A)
    V โข L (f x) (ฯ x) := sorry_proof


open Rand in
@[distrib_eval]
theorem function_toDistribution_eval_restrict (f : X โ Y) (B A : Set X) (ฯ : X โ U) (L : Y โธ U โธ V) [UniformRand A] :
  ((f.toDistribution.restrict B).restrict A).extAction ฯ L
  =
  (uniform A).๐ผ fun x =>
    let V : R := Scalar.ofENNReal (volume A)
    if x.1 โ B then
      V โข L (f x) (ฯ x)
    else
      0 := sorry_proof


@[simp, ftrans_simp, action_push]
theorem function_toDistribution_extAction_unit {X} [Vec R X] [Module โ X] (f : Unit โ X) (ฯ : Unit โ Y) (L : X โธ Y โธ Z) :
    f.toDistribution.extAction ฯ L
    =
    L (f ()) (ฯ ()) := sorry_proof




open Rand in
theorem distrib_action_as_expectation [MeasureSpace X] (r : Rand X) {f : X โ U} {ฯ : X โ V} {L : U โธ V โธ W} :
  (f.toDistribution).extAction ฯ L
  =
  r.๐ผ fun x => (r.pdf R volume x)โปยน โข L (f x) (ฯ x) := sorry_proof
