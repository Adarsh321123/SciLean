-- import SciLean.Core.Data.Curry
import SciLean.Mathlib.Convenient.Basic
-- import SciLean.Core.New.IsSmooth
import SciLean.Core.TensorProduct
import SciLean.Core.FinVec
import SciLean.Core.SmoothMap

namespace SciLean


@[fun_prop_def]
structure IsLin {X Y : Type _} [Vec X] [Vec Y] (f : X ‚Üí Y) : Prop where
 isLin : TensorProduct.is_linear f 
 isSmooth : IsSmooth f

structure LinMap (X Y : Type _) [Vec X] [Vec Y] where
  toFun : X ‚Üí Y 
  isLin_toFun : IsLin toFun := by infer_instance

/-- `X --o Y` is the space of all linear maps between `X` and `Y`.

The notation `X ‚ä∏ Y` is prefered, but this fixes pure ASCII equivalent. -/
infixr:25 " --o " => LinMap

/-- `X ‚ä∏ Y` is the space of all linear maps between `X` and `Y` -/
infixr:25 " ‚ä∏ " => LinMap

-- Lambda notation
open Lean.TSyntax.Compat in
macro "Œª"   xs:Lean.explicitBinders " ‚ä∏ " b:term : term =>
  Lean.expandExplicitBinders `SciLean.LinMap.mk xs b
open Lean.TSyntax.Compat in
macro "fun"   xs:Lean.explicitBinders " ‚ä∏ " b:term : term =>
  Lean.expandExplicitBinders `SciLean.LinMap.mk xs b

class LinMapClass (F : Type _) (X Y : outParam <| Type _) [Vec X] [Vec Y]
  extends FunLike F X fun _ => Y where
  map_isLin (f : F) : IsLin f

export LinMapClass (map_isLin)

attribute [fun_prop] map_isLin

section LinMapClass

  -- The following is heavily inspired by ContinuousMap

  variable {F X Y : Type _} [Vec X] [Vec Y] [LinMapClass F X Y]

  instance : CoeTC F (X ‚ä∏ Y) :=
    ‚ü®fun f =>
      { toFun := f
        isLin_toFun := map_isLin f }‚ü©

end LinMapClass

namespace LinMap

  variable {X Y Z W : Type _} [Vec X] [Vec Y] [Vec Z] [Vec W]

  instance : LinMapClass (X‚ä∏Y) X Y where
    map_isLin f := f.isLin_toFun
    coe f := f.toFun
    coe_injective' := sorry_proof
    
  @[simp]
  theorem toFun_eq_coe {f : X ‚ä∏ Y} : f.toFun = (f : X ‚Üí Y) :=
    rfl

  def Simps.apply (f : X ‚ä∏ Y) : X ‚Üí Y := f

  initialize_simps_projections LinMap (toFun ‚Üí apply)

  @[simp]
  protected theorem coe_coe {F : Type} [LinMapClass F X Y] (f : F) : ‚áë(f : X ‚ä∏ Y) = f :=
    rfl

  @[ext]
  theorem ext {f g : X ‚ä∏ Y} (h : ‚àÄ x, f x = g x) : f = g :=
    FunLike.ext _ _ h

  @[fun_prop]
  theorem isLin_set_coe (s : Set (X‚ä∏Y)) (f : s) : IsLin (f : X ‚Üí Y) :=
    map_isLin f.1

  @[simp]
  theorem coe_mk (f : X ‚Üí Y) (h : IsLin f) : ‚áë(‚ü®f, h‚ü© : X ‚ä∏ Y) = f :=
    rfl

  @[simp]
  theorem eta (f : X ‚ä∏ Y)
      : (Œª (x : X) ‚ä∏ f x) = f := by rfl; done

  protected def id : X ‚ä∏ X :=
    LinMap.mk (Œª x => x) sorry

  @[simp]
  theorem coe_id : ‚áë(LinMap.id : X ‚ä∏ X) = _root_.id := 
    rfl

  @[simp]
  theorem id_apply (x : X) : LinMap.id x = x :=
    rfl

  ------------------------------------------------------------------------------
  -- X ‚ä∏ Y is vector space 
  ------------------------------------------------------------------------------

  theorem show_is_lin_via {X Y} [Vec X] [Vec Y] {f : X ‚Üí Y} (g : X ‚ä∏ Y) : (f = g) ‚Üí IsLin f :=
  by
    intro p
    have q : f = g := by apply p
    rw[q]; infer_instance

  def comp' : (Y‚ä∏Z) ‚Üí (X‚ä∏Y) ‚Üí (X‚ä∏Z) := Œª f g =>
    LinMap.mk (Œª x => f (g x)) sorry

  def prodMap' : (X‚ä∏Y) ‚Üí (X‚ä∏Z) ‚Üí (X ‚ä∏ Y√óZ) := Œª f g =>
    LinMap.mk (Œª x => (f x, g x)) sorry

  def zeroFun : Y‚ä∏X :=
    LinMap.mk (Œª y => (0 : X)) sorry

  def swap : X‚äóY ‚Üí Y‚äóX := (Œª xy => xy.map' (Œª (x : X) (y : Y) => y‚äóx) sorry)

  @[simp] theorem comp'_eval (f : Y ‚ä∏ Z) (g : X‚ä∏Y) (x : X) : comp' f g x = f (g x) := by simp[comp']
  @[simp] theorem prodMap'_eval (f : X ‚ä∏ Y) (g : X‚ä∏Z) (x : X) : prodMap' f g x = (f x, g x) := by simp[prodMap']
  @[simp] theorem zeroFun_eval (y : Y) : zeroFun y = (0 : X) := by simp[zeroFun]


  def neg : X ‚ä∏ X := LinMap.mk (Œª x => -x) sorry
  def add' : X√óX ‚ä∏ X := LinMap.mk (Œª (x,y) => x+y) sorry
  def sub' : X√óX ‚ä∏ X := LinMap.mk (Œª (x,y) => x-y) sorry
  def mul' : ‚Ñù√ó‚Ñù ‚ä∏ ‚Ñù := LinMap.mk (Œª (x,y) => x*y) sorry

  -- def tassocl : 
  -- def tassocr : 
  def unit' : ‚Ñù ‚Üí X ‚ä∏ ‚Ñù‚äóX := Œª r => LinMap.mk (Œª x => r‚äóx) sorry
  def counit : ‚Ñù‚äóX ‚ä∏ X := LinMap.mk ((Œª rx => rx.map' (Œª r x => r ‚Ä¢ x) sorry)) sorry

  @[simp] theorem unit'_eval (r : ‚Ñù) (x : X) : unit' r x = r‚äóx := by simp[unit']
  @[simp] theorem counit_eval (r : ‚Ñù) (x : X) : counit (r‚äóx) = r‚Ä¢x := by simp[counit]

  instance : Neg (X‚ä∏Y) := ‚ü®Œª f => LinMap.mk (Œª x => -f x)
    (show_is_lin_via (comp' neg f) (by funext; simp[neg]))‚ü©

  instance : Add (X‚ä∏Y) := ‚ü®Œª f g => LinMap.mk (Œª x => f x + g x)
    (show_is_lin_via (comp' add' (prodMap' f g)) (by funext; simp[add']))‚ü©

  instance : Sub (X‚ä∏Y) := ‚ü®Œª f g => LinMap.mk (Œª x => f x - g x)
    (show_is_lin_via (comp' sub' (prodMap' f g)) (by funext; simp[sub']))‚ü©

  instance : Mul (X‚ä∏‚Ñù) := ‚ü®Œª f g => LinMap.mk (Œª x => f x * g x)
    (show_is_lin_via (comp' mul' (prodMap' f g)) (by funext; simp[mul']))‚ü©

  instance : SMul ‚Ñù (X‚ä∏Y) := ‚ü®Œª r f => LinMap.mk (Œª x => r ‚Ä¢ f x)
    (show_is_lin_via (comp' counit (comp' (unit' r) f)) (by funext; simp))‚ü©

  instance : Zero (X ‚ä∏ Y) := ‚ü®zeroFun‚ü©

  -- !!!THIS USES SORRY!!!
  instance : Vec (X ‚ä∏ Y) := Vec.mkSorryProofs


  def _root_.SciLean.TensorProduct.map (f : X ‚ä∏ Y ‚ä∏ Z) (xy : X‚äóY) : Z := xy.map' (Œª x y => f x y) sorry_proof

  section FinVec 

    variable {X Y : Type _} {Œπ Œ∫} {_ : Enumtype Œπ} {_ : Enumtype Œ∫}

  -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [Hilbert Y] : Inner (X ‚ä∏ Y) where
      -- This should be the correct version of the inner product
      -- It looks assymetrical but it is a consequence of `inner_proj_dualproj`
      --   ‚ü™x, y‚ü´ = ‚àë i, ùï° i x * ùï°' i y
      -- which also appears assymetrical
      inner f g := ‚àë i, ‚ü™f (ùïñ i), g (ùïñ' i)‚ü´

    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [Hilbert Y] : TestFunctions (X ‚ä∏ Y) where
      TestFun _ := True

    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [Hilbert Y] : SemiHilbert (X ‚ä∏ Y) := SemiHilbert.mkSorryProofs

    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [Hilbert Y] : Hilbert (X ‚ä∏ Y) := Hilbert.mkSorryProofs

    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [FinVec Y Œ∫] : Basis (X ‚ä∏ Y) (Œπ√óŒ∫) ‚Ñù where
      basis := Œª (i,j) => LinMap.mk (Œª x => ùï° i x ‚Ä¢ ùïñ[Y] j) sorry_proof
      proj := Œª (i,j) f => ùï° j (f (ùïñ i))

    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [FinVec Y Œ∫] : DualBasis (X ‚ä∏ Y) (Œπ√óŒ∫) ‚Ñù where
      dualBasis := Œª (i,j) => LinMap.mk (Œª x => ùï°' i x ‚Ä¢ ùïñ'[Y] j) sorry_proof
      dualProj := Œª (i,j) f => ùï°' j (f (ùïñ' i))

    open BasisDuality in
    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [FinVec Y Œ∫] : BasisDuality (X ‚ä∏ Y) where
      toDual   := Œª f => LinMap.mk (Œª x => toDual (f (fromDual x))) sorry_proof
      fromDual := Œª f => LinMap.mk (Œª x => fromDual (f (toDual x))) sorry_proof

    -- @[infer_tc_goals_rl]
    instance [FinVec X Œπ] [FinVec Y Œ∫] : FinVec (X ‚ä∏ Y) (Œπ√óŒ∫) where     
      is_basis := sorry_proof
      duality := by 
        intro (i,j) (i',j'); simp[Basis.basis, DualBasis.dualBasis, Inner.inner];
        -- This should be:
        --  ‚àë i_i, ‚ü™[[i=i_]] * ùïñ j, [[i'=i_1]] ùïñ' j'‚ü´
        --  [[i=i']] * ‚ü™ùïñ j, ùïñ' j'‚ü´
        --  [[i=i']] * [[j=j']]
        sorry_proof
      to_dual := by
        simp [BasisDuality.toDual, Basis.proj, DualBasis.dualBasis]
        intro f; ext x; 
        simp[FinVec.to_dual,FinVec.from_dual]
        -- Now the goal is:
        --   ‚àë j, ùï° j (f (‚àë i, ùï°' i x * ùïñ i)) * ùïñ' j
        --   =
        --   ‚àë (i,j), ùï° j (f (ùïñ i)) * ùï°' i x * ùïñ' j
        sorry_proof
      from_dual := by
        simp [BasisDuality.fromDual, DualBasis.dualProj, Basis.basis]
        intro f; ext x; 
        simp[FinVec.to_dual,FinVec.from_dual]
        -- Now the goal is:
        --   ‚àë j, ùï°' j (f (‚àë i, ùï° i x * ùïñ' i)) * ùïñ j
        --   =
        --   ‚àë (i,j), ùï°' j (f (ùïñ' i)) * ùï°' i x * ùïñ j
        sorry_proof

  end FinVec 


  ------------------------------------------------------------------------------
  -- Basic combinators like const, comp, curry, uncurry, prodMk, prodMap, pi
  ------------------------------------------------------------------------------


  def curry' (f : X ‚äó Y ‚ä∏ Z) : (X ‚ä∏ Y ‚ä∏ Z) := 
    LinMap.mk (Œª x => 
      LinMap.mk (Œª y => f (x ‚äó y)) 
      sorry_proof) 
    sorry_proof

  def uncurry' (f : X ‚ä∏ Y ‚ä∏ Z) : (X ‚äó Y ‚ä∏ Z) := 
    LinMap.mk (Œª xy => xy.map' (Œª x y => f x y) sorry_proof) sorry_proof

  def fst : X√óY ‚ä∏ X := LinMap.mk (Œª (x,_) => x) sorry_proof
  def snd : X√óY ‚ä∏ Y := LinMap.mk (Œª (_,y) => y) sorry_proof

  @[simp] theorem curry'_eval (f : X‚äóY ‚ä∏ Z) (x : X) (y : Y) : curry' f x y = f (x‚äóy) := by simp[curry']
  @[simp] theorem uncurry'_eval (f : X ‚ä∏ Y ‚ä∏ Z) (xy : X‚äóY) : uncurry' f xy = xy.map f := by simp[uncurry',TensorProduct.map]
  @[simp] theorem id_eval (x : X) : id x = x := by simp[id]
  @[simp] theorem fst_eval (xy : X√óY) : fst xy = xy.1 := by simp[fst]
  @[simp] theorem snd_eval (xy : X√óY) : snd xy = xy.2 := by simp[snd]

  def tprod : X ‚ä∏ Y ‚ä∏ X‚äóY := 
    LinMap.mk (Œª x => 
      LinMap.mk (Œª y => x‚äóy)
      (show_is_lin_via (curry' LinMap.id x) (by ext y; simp)))
    (show_is_lin_via (curry' LinMap.id) (by ext x y; simp))

  -- noncomputable
  -- def tpmap : (X‚ä∏Y) ‚ä∏ (X‚ä∏Z) ‚ä∏ (X‚ä∏Y‚äóZ) := ‚ü®Œª f => ‚ü®Œª g => ‚ü®Œª x => (f x ‚äó g x), sorry_proof‚ü©, sorry_proof‚ü©, sorry_proof‚ü©
  -- noncomputable
  -- def tfmap : (X‚ä∏Z) ‚ä∏ (Y‚ä∏W) ‚ä∏ (X‚äóY‚ä∏Z‚äóW) := ‚ü®Œª f => ‚ü®Œª g => ‚ü®Œª xy => 
  --   let ‚ü®_,x,y‚ü© := xy.repr
  --   ‚àë i, f (x i) ‚äó g (y i), sorry_proof‚ü©, sorry_proof‚ü©, sorry_proof‚ü©


  -- def pmap : (X‚ä∏Y) √ó (X‚ä∏Z) ‚ä∏ (X‚ä∏Y√óZ) := ‚ü®Œª (f,g) => ‚ü®Œª x => (f x, g x), sorry_proof‚ü©, sorry_proof‚ü©
  -- def fmap : (X‚ä∏Z) √ó (Y‚ä∏W) ‚ä∏ (X√óY‚ä∏Z√óW) := ‚ü®Œª (f,g) =>‚ü®Œª (x,y) => (f x, g y), sorry_proof‚ü©, sorry_proof‚ü©
  -- def fmap' : (X‚ÜíZ) √ó (Y‚ÜíW) ‚ä∏ (X√óY‚ÜíZ√óW) := ‚ü®Œª (f,g) => Œª (x,y) => (f x, g y), sorry_proof‚ü©
  -- def pmap' : (X‚ÜíY) √ó (X‚ÜíZ) ‚ä∏ (X‚ÜíY√óZ) := ‚ü®Œª (f,g) => Œª x => (f x, g x), sorry_proof‚ü©

  -- -- I don't think this is a valid map
  -- -- noncomputable
  -- -- def tfmap' : (X‚ÜíZ) ‚ä∏ (Y‚ÜíW) ‚ä∏ (X‚äóY‚ÜíZ‚äóW) := ‚ü®Œª f => ‚ü® Œª g => Œª xy => 
  -- --   let ‚ü®_,x,y‚ü© := xy.repr
  -- --   ‚àë i, f (x i) ‚äó g (y i), sorry_proof‚ü©, sorry_proof‚ü©

  -- noncomputable
  -- def tpmap' : (X‚ÜíY) ‚ä∏ (X‚ÜíZ) ‚ä∏ (X‚ÜíY‚äóZ) := ‚ü®Œª f => ‚ü®Œª g => Œª x => f x ‚äó g x, sorry_proof‚ü©, sorry_proof‚ü©


  -- -- Does this one work?
  -- def comp'' : (Y ‚ä∏ Z) ‚ä∏ (X ‚Üí Y) ‚ä∏ (X ‚Üí Z) := ‚ü®Œª f => ‚ü®Œª g => Œª x => f (g x), sorry_proof‚ü©, sorry_proof‚ü©


  -- noncomputable
  -- def teval : ((X‚ä∏Y)‚äóX) ‚ä∏ Y := uncurry' id
  -- noncomputable
  -- def tpair : X‚ä∏Y‚ä∏X‚äóY := curry' id

  
  -- def assocl : X√ó(Y√óZ) ‚ä∏ (X√óY)√óZ := 
  --   let F : X√ó(Y√óZ) ‚ä∏ (X√óY)√óZ := pmap ((pmap (fst, (comp' fst snd))), (comp' snd snd))
  --   ‚ü®Œª (x,(y,z)) => ((x,y),z), 
  --    by 
  --      have h : (Œª (x,(y,z)) => ((x,y),z)) = F.1 := by simp[pmap, comp', fst, snd]
  --      rw[h]
  --      apply F.2‚ü©

  -- def assocr : (X√óY)√óZ ‚ä∏ X√ó(Y√óZ) := 
  --   let F : (X√óY)√óZ ‚ä∏ X√ó(Y√óZ) := pmap ((comp' fst fst), (pmap ((comp' snd fst), snd)))
  --   ‚ü®Œª ((x,y),z) => (x,(y,z)),
  --    by 
  --      have h : (Œª ((x,y),z) => (x,(y,z))) = F.1 := by simp[pmap, comp', fst, snd]
  --      rw[h]
  --      apply F.2‚ü©

  -- @[simp]
  -- theorem assocl_eval (xyz : X√ó(Y√óZ)) : assocl xyz = ((xyz.1,xyz.2.1),xyz.2.2) := rfl

  -- @[simp]
  -- theorem assocr_eval (xyz : (X√óY)√óZ) : assocr xyz = (xyz.1.1,(xyz.1.2,xyz.2)) := rfl

  -- noncomputable
  -- def tassocl : X‚äó(Y‚äóZ) ‚ä∏ (X‚äóY)‚äóZ := ‚ü®Œª xyz => 
  --   let ‚ü®_,x,yz‚ü© := xyz.repr
  --   let y := Œª i => (yz i).repr.snd.fst
  --   let z := Œª i => (yz i).repr.snd.snd
  --   ‚àë i j, (x i ‚äó y i j) ‚äó z i j,
  --   sorry_proof‚ü©

  -- noncomputable
  -- def tassocr : (X‚äóY)‚äóZ ‚ä∏ X‚äó(Y‚äóZ) := ‚ü®Œª xyz => 
  --   let ‚ü®_,xy,z‚ü© := xyz.repr
  --   let x := Œª i => (xy i).repr.snd.fst
  --   let y := Œª i => (xy i).repr.snd.snd
  --   ‚àë i j, x i j ‚äó (y i j ‚äó z i),
  --   sorry_proof‚ü©

  -- def swap : (X√óY) ‚ä∏ (Y√óX) := pmap (snd, fst)

  -- @[simp]
  -- theorem swap_eval (xy : (X√óY)) : swap xy = (xy.2, xy.1) := rfl

  -- noncomputable
  -- def tswap : (X‚äóY) ‚ä∏ (Y‚äóX) := ‚ü®Œª xy => 
  --   let ‚ü®_,x,y‚ü© := xy.repr
  --   ‚àë i, y i ‚äó x i,
  --   sorry_proof‚ü©

  -- def rot132 : (X√óY)√óZ ‚ä∏ (X√óZ)√óY := comp' assocl (comp' (fmap (id, swap)) assocr)

  -- @[simp]
  -- theorem rot132_eval (xyz : (X√óY)√óZ) : rot132 xyz = ((xyz.1.1, xyz.2), xyz.1.2) := rfl

  -- noncomputable
  -- def trot132 : (X‚äóY)‚äóZ ‚ä∏ (X‚äóZ)‚äóY := comp' tassocl (comp' (tfmap id tswap) tassocr)

  -- @[simp]
  -- theorem trot132_eval (x : X) (y : Y) (z : Z) : trot132 ((x‚äóy)‚äóz) = (x‚äóz)‚äóy := sorry_proof

  -- -- TODO: This function is perfectly computable, make it so
  -- -- only the proof of linearity goes via noncomputable tensor product
  -- noncomputable
  -- def comp : (Y ‚ä∏ Z) ‚ä∏ (X ‚ä∏ Y) ‚ä∏ (X ‚ä∏ Z) := 
  --   let F‚ÇÅ : (Y‚ä∏Z)‚äó((X‚ä∏Y)‚äóX) ‚ä∏ Z := comp' teval (tfmap id teval)
  --   curry' (curry' (comp' F‚ÇÅ tassocr))


  -- @[simp]
  -- theorem comp_eval (f : Y‚ä∏Z) (g : X ‚ä∏ Y) (x : X) : comp f g x = f (g x) := sorry_proof

  -- -- def const : X‚ä∏Y‚ä∏X := curry' fst

  -- -- @[simp]
  -- -- theorem const_eval (f : Y‚ä∏Z) (g : X ‚ä∏ Y) (x : X) : comp f g x = f (g x) := rfl

  -- noncomputable
  -- def uncurry : (X ‚ä∏ Y ‚ä∏ Z) ‚ä∏ (X‚äóY ‚ä∏ Z) := 
  --   let F : ((X‚ä∏Y‚ä∏Z)‚äóX)‚äóY ‚ä∏ Z := comp teval (tfmap teval id)

  --   let G‚ÇÅ : (X‚äóY ‚ä∏ (X‚ä∏Y‚ä∏Z)‚äó(X‚äóY)) ‚ä∏ (X‚äóY ‚ä∏ Z) := comp (comp' F tassocl)
  --   let G‚ÇÇ : (X‚ä∏Y‚ä∏Z) ‚ä∏ (X‚äóY ‚ä∏ (X‚ä∏Y‚ä∏Z)‚äó(X‚äóY)) := tpair
  --   comp' G‚ÇÅ G‚ÇÇ

  -- -- @[simp]
  -- -- theorem Smooth.uncurry_eval (f : X ‚ä∏ Y ‚ä∏ Z) (xy : X√óY) : Smooth.uncurry f xy = f xy.1 xy.2 := by rfl
  
  -- noncomputable
  -- def curry : (X ‚äó Y ‚ä∏ Z) ‚ä∏ (X ‚ä∏ Y ‚ä∏ Z) := 

  --   let G : ((X‚äóY‚ä∏Z)‚äóY)‚äóX ‚ä∏ Z := comp (comp (uncurry' id) (tfmap id tswap)) tassocr

  --   let H : (Y ‚ä∏ (X‚äóY‚ä∏Z)‚äóY)‚äóX ‚ä∏ (Y ‚ä∏ ((X‚äóY‚ä∏Z)‚äóY)‚äóX) := curry' (comp (tfmap teval id) trot132)

  --   let F‚ÇÅ : (X‚äóY‚ä∏Z) ‚ä∏ (Y ‚ä∏ (X‚äóY‚ä∏Z)‚äóY) := tpair
  --   let F‚ÇÇ : (Y ‚ä∏ (X‚äóY‚ä∏Z)‚äóY) ‚ä∏ (X ‚ä∏ (Y ‚ä∏ (X‚äóY‚ä∏Z)‚äóY)‚äóX) := tpair
  --   let F‚ÇÉ : (X ‚ä∏ (Y ‚ä∏ (X‚äóY‚ä∏Z)‚äóY)‚äóX) ‚ä∏ (X ‚ä∏ (Y ‚ä∏ ((X‚äóY‚ä∏Z)‚äóY)‚äóX)) := comp H

  --   comp (comp (comp G)) (comp F‚ÇÉ (comp F‚ÇÇ F‚ÇÅ))

  -- -- @[simp]
  -- -- theorem Smooth.curry_eval (f : X√óY ‚ä∏ Z) (x : X) (y : Y) : Smooth.curry f x y = f (x,y) := by rfl

  -- -- TODO: make it computable
  -- noncomputable 
  -- def prod : (X ‚Üí Y ‚ä∏ Z) ‚ä∏ (X‚ÜíY) ‚ä∏ (X‚ÜíZ) := 
  --   let F : (X ‚Üí Y ‚ä∏ Z) ‚ä∏ (X‚ÜíY) ‚ä∏ (X ‚Üí Y ‚ä∏ Z)‚äó(X‚ÜíY) := tpair
  --   let G‚ÇÅ : (X ‚Üí Y ‚ä∏ Z)‚äó(X‚ÜíY) ‚ä∏ (X ‚Üí (Y‚ä∏Z)‚äóY) := uncurry tpmap'
  --   let G‚ÇÇ : (X ‚Üí (Y‚ä∏Z)‚äóY) ‚ä∏ (X‚ÜíZ) := comp'' teval
    
  --   comp (comp (comp G‚ÇÇ G‚ÇÅ)) F

  -- @[simp]
  -- theorem prod_eval (f : X ‚Üí Y ‚ä∏ Z) : prod f (Œª _ => y) x = f x y := sorry_proof

  -- -- def scomb : (X‚ä∏Y‚ä∏Z) ‚ä∏ (X‚ä∏Y) ‚ä∏ X ‚ä∏ Z := 
  -- --   let F‚ÇÅ : (X‚ä∏Y‚ä∏Z)‚äó(X‚ä∏Y)‚äóX ‚ä∏ (X‚äóY‚ä∏Z)‚äó(X‚äóY) := tfmap uncurry (tpmap snd teval)
  -- --   comp (curry) (curry (comp eval F‚ÇÅ))


  -- -- variable {Œπ Œ∫ : Type} {E F G : Œπ ‚Üí Type} {E' : Œ∫ ‚Üí Type} [‚àÄ i, Vec (E i)] [‚àÄ i, Vec (F i)] [‚àÄ i, Vec (G i)] [‚àÄ j, Vec (E' j)]
  -- -- instance  [‚àÄ i, Vec (F i)] : Vec ((i : Œπ) ‚Üí (F i)) := sorry

  -- -- def Smooth.pmapDep : ((i : Œπ)‚Üí(E i)) ‚ä∏ ((i : Œπ)‚Üí(F i)) ‚ä∏ ((i : Œπ)‚Üí(E i)√ó(F i)) := ‚ü®Œª f => ‚ü®Œª g => Œª x => (f x, g x), sorry‚ü©, sorry‚ü©
  -- -- def Smooth.fmapDep : ((i : Œπ)‚Üí(E i)) ‚ä∏ ((j : Œ∫)‚Üí(E' j)) ‚ä∏ ((ij : (Œπ√óŒ∫))‚Üí(E ij.1)√ó(E' ij.2)) := ‚ü®Œª f => ‚ü®Œª g => Œª (i,j) => (f i, g j), sorry‚ü©, sorry‚ü©
  -- -- def Smooth.prodDep : ((i : Œπ) ‚Üí E i ‚ä∏ F i) ‚ä∏ ((i : Œπ) ‚Üí E i) ‚ä∏ ((i : Œπ) ‚Üí F i) := sorry 


  -- end Linear

