import SciLean.Core.Differential
import SciLean.Core.IsSmoothDep

namespace SciLean

variable {X Y Z W Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} [Diff X] [Diff Y] [Diff Z] [Diff W] [Diff Y‚ÇÅ] [Diff Y‚ÇÇ] [Diff Y‚ÇÉ]
  {Œ± Œ≤ Œ≥ : Type} 

noncomputable 
def differentialDep (f : X ‚Üí Y) : (x : X) ‚Üí ùíØ[x] X ‚Üí ùíØ[f x] Y := sorry

noncomputable 
def tangentMapDep (f : X ‚Üí Y) : ùíØ X ‚Üí ùíØ Y := Œª ‚ü®x,dx‚ü© => ‚ü®f x, differentialDep f x dx‚ü©

instance(priority:=mid-1) (f : X ‚Üí Y) : Partial f (differentialDep f) := ‚ü®‚ü©
instance(priority:=mid-1) (f : X ‚Üí Y) : TangentMap f (tangentMapDep f) := ‚ü®‚ü©


@[simp ‚Üì, autodiff]
theorem differentialDep.of_id
  : ‚àÇ (Œª x : X => x) = Œª x dx => dx := sorry_proof

@[simp ‚Üì, autodiff]
theorem differentialDep.of_const (x : X)
  : ‚àÇ (Œª y : Y => x) = Œª y dy => 0 := sorry_proof

@[simp ‚Üì low-3, autodiff low-3]
theorem differentialDep.of_swap (f : Œ± ‚Üí X ‚Üí Y) [‚àÄ i, IsSmoothDepT (f i)]
  : ‚àÇ (Œª x a => f a x) = Œª x dx a => ‚àÇ (f a) x dx := sorry_proof

@[simp ‚Üì low-1, autodiff low-1]
theorem differentialDep.of_comp
  (f : Y ‚Üí Z) [IsSmoothDepT f]
  (g : X ‚Üí Y) [IsSmoothDepT g]
  : ‚àÇ (Œª x => f (g x))
    =
    Œª x dx =>
      -- option 1:
      let ‚ü®y,dy‚ü© := ùíØ g ‚ü®x,dx‚ü©
      have h : y = g x := by admit
      h ‚ñ∏ ‚àÇ f y dy
      -- option 2:
      -- let y := g x
      -- let dy := ‚àÇ g x dx
      -- have h : y = g x := by admit
      -- h ‚ñ∏ ‚àÇ f y dy
      -- option 3:
      -- ‚àÇ f (g x) (‚àÇ g x dx)
  := sorry_proof

@[simp ‚Üì low-2, autodiff low-2]
theorem differentialDep.of_diag
  (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  (g‚ÇÅ : X ‚Üí Y‚ÇÅ) [IsSmoothDepT g‚ÇÅ]
  (g‚ÇÇ : X ‚Üí Y‚ÇÇ) [IsSmoothDepT g‚ÇÇ]
  : ‚àÇ (Œª x => f (g‚ÇÅ x) (g‚ÇÇ x)) 
    = 
    Œª x dx => 
      let ‚ü®y‚ÇÅ,dy‚ÇÅ‚ü© := ùíØ g‚ÇÅ ‚ü®x,dx‚ü©
      let ‚ü®y‚ÇÇ,dy‚ÇÇ‚ü© := ùíØ g‚ÇÇ ‚ü®x,dx‚ü©
      have h‚ÇÅ : y‚ÇÅ = g‚ÇÅ x := by admit
      have h‚ÇÇ : y‚ÇÇ = g‚ÇÇ x := by admit
      -- let y‚ÇÅ := g‚ÇÅ x
      -- let dy‚ÇÅ := ‚àÇ g‚ÇÅ x dx
      -- let y‚ÇÇ := g‚ÇÇ x
      -- let dy‚ÇÇ := ‚àÇ g‚ÇÇ x dx
      h‚ÇÅ ‚ñ∏ h‚ÇÇ ‚ñ∏ (‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ)
  := sorry_proof

@[simp ‚Üì low, autodiff low]
theorem differentialDep.of_parm
  (f : X ‚Üí Œ± ‚Üí Y) [IsSmoothDepT f] (a : Œ±)
  : ‚àÇ (Œª x => f x a) = Œª x dx => ‚àÇ f x dx a := 
by
  rw[differentialDep.of_swap (Œª a x => f x a)]

@[simp ‚Üì, autodiff]
theorem differentialDep.of_eval
  (a : Œ±)
  : ‚àÇ (Œª f : Œ± ‚Üí Y => f a) = Œª _ df => df a := by simp

@[simp ‚Üì, autodiff]
theorem Prod.fst.arg_xy.diffDep_simp
  : ‚àÇ (Prod.fst : X√óY ‚Üí X) 
    =
    Œª xy dxy => dxy.1
  := sorry_proof

@[simp ‚Üì, autodiff]
theorem Prod.snd.arg_xy.diffDep_simp
  : ‚àÇ (Prod.snd : X√óY ‚Üí Y) 
    =
    Œª xy dxy => dxy.2
  := sorry_proof

--------------------------------------------------------------------------------
-- Tangent Map Rules --
--------------------------------------------------------------------------------

@[simp ‚Üì, autodiff]
theorem tangentMapDep.of_id
  : ùíØ (Œª x : X => x) = Œª xdx => xdx 
  := by funext ‚ü®x,dx‚ü©; simp[tangentMapDep]; done

@[simp ‚Üì, autodiff]
theorem tangentMapDep.of_const (x : X)
  : ùíØ (Œª y : Y => x) = Œª ‚ü®y,dy‚ü© => ‚ü®x,0‚ü©
  := by simp[tangentMapDep]; done

@[simp ‚Üì low-3, autodiff low-3]
theorem tangentMapDep.of_swap (f : Œ± ‚Üí X ‚Üí Y) [‚àÄ i, IsSmoothDepT (f i)]
  : ùíØ (Œª x a => f a x) = Œª ‚ü®x,dx‚ü© => ‚ü®Œª a => f a x, Œª a => ‚àÇ (f a) x dx‚ü©
  := by simp[tangentMapDep]; done

@[simp ‚Üì low-1, autodiff low-1]
theorem tangentMapDep.of_comp
  (f : Y ‚Üí Z) [IsSmoothDepT f]
  (g : X ‚Üí Y) [IsSmoothDepT g]
  : ùíØ (Œª x => f (g x)) 
    = 
    Œª xdx => ùíØ f (ùíØ g xdx)
  := by funext ‚ü®x,dx‚ü©; simp[tangentMapDep]; done

@[simp ‚Üì low-2, autodiff low-2]
theorem tangentMapDep.of_diag
  (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  (g‚ÇÅ : X ‚Üí Y‚ÇÅ) [IsSmoothDepT g‚ÇÅ]
  (g‚ÇÇ : X ‚Üí Y‚ÇÇ) [IsSmoothDepT g‚ÇÇ]
  : ùíØ (Œª x => f (g‚ÇÅ x) (g‚ÇÇ x))
    = 
    Œª ‚ü®x,dx‚ü© => 
      let ‚ü®y‚ÇÅ,dy‚ÇÅ‚ü© := ùíØ g‚ÇÅ ‚ü®x,dx‚ü©
      let ‚ü®y‚ÇÇ,dy‚ÇÇ‚ü© := ùíØ g‚ÇÇ ‚ü®x,dx‚ü©
      -- (f y‚ÇÅ y‚ÇÇ, ‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ)
      ùíØ (uncurryN 2 f) ‚ü®(y‚ÇÅ,y‚ÇÇ),(dy‚ÇÅ,dy‚ÇÇ)‚ü©
  := by 
    conv in (uncurryN 2 _) =>
      simp[uncurryN, Prod.Uncurry.uncurry]
    simp[tangentMapDep]
    done



/-- Last resort theorem that changes tangent map to normal differential 

Bilinear maps should usually provide a rewrite rule for `ùíØ (uncurryN 2 f)`
-/
@[simp ‚Üì low-5, autodiff low-5]
theorem tangentMapDep.of_uncurryN (f : Y‚ÇÅ ‚Üí Y‚ÇÇ ‚Üí Z) [IsSmoothDepNT 2 f]
  : ùíØ (uncurryN 2 f) 
    =
    Œª ‚ü®(y‚ÇÅ,y‚ÇÇ),(dy‚ÇÅ,dy‚ÇÇ)‚ü© =>
    ‚ü®f y‚ÇÅ y‚ÇÇ, ‚àÇ f y‚ÇÅ dy‚ÇÅ y‚ÇÇ + ‚àÇ (f y‚ÇÅ) y‚ÇÇ dy‚ÇÇ‚ü©
  := by 
    funext ‚ü®(y‚ÇÅ,y‚ÇÇ),(dy‚ÇÅ,dy‚ÇÇ)‚ü©
    simp[tangentMapDep]
    apply Sigma.ext
    simp[uncurryN, Prod.Uncurry.uncurry] -- why does it not unfold?
    admit

@[simp ‚Üì low, autodiff low]
theorem tangentMapDep.of_parm
  (f : X ‚Üí Œ± ‚Üí Y) [IsSmoothDepT f] (a : Œ±)
  : ùíØ (Œª x => f x a) = Œª xdx => let ‚ü®f',df'‚ü© := ùíØ f xdx; ‚ü®f' a, df' a‚ü©
  := by funext ‚ü®x,dx‚ü©; simp[tangentMapDep]; done

@[simp ‚Üì, autodiff]
theorem tangentMapDep.of_eval
  (a : Œ±)
  : ‚àÇ (Œª f : Œ± ‚Üí Y => f a) = Œª _ df => df a := by simp


--------------------------------------------------------------------------------

#exit 

instance Sum.inl.arg_x.isSmoothDep : IsSmoothDep (Sum.inl : X ‚Üí X‚äïY) := sorry_proof
instance : IsSmoothDep (Sum.inr : Y ‚Üí X‚äïY) := sorry_proof

@[simp]
theorem Sum.inl.arg_x.diffDep_simp 
  : ‚àÇ (Sum.inl : X ‚Üí X‚äïY) = Œª x dx => dx := sorry_proof

@[simp]
theorem Sum.inr.arg_x.diffDep_simp 
  : ‚àÇ (Sum.inr : Y ‚Üí X‚äïY) = Œª y dy => dy := sorry_proof

abbrev Sum.map {Œ± Œ≤ Œ≥} (f : Œ± ‚Üí Œ≥) (g : Œ≤ ‚Üí Œ≥) (xy : Œ±‚äïŒ≤) : Œ≥ := 
  match xy with | .inl x => f x | .inr y => g y

infix:50 "‚äï" => Sum.map
infix:50 "√ó" => Prod.map

instance Sum.rec.arg_t.isSmoothDep
  (f : X ‚Üí Z) [IsSmoothDepT f]
  (g : Y ‚Üí Z) [IsSmoothDepT g]
  -- : IsSmoothDepT (Œª (xy : X‚äïY) => match xy with | .inl x => f x | .inr y => g y) := sorry_proof
  : IsSmoothDepT (f‚äïg) := sorry_proof

example
  (f : X ‚Üí Z) [IsSmoothDepT f]
  (g : Y ‚Üí Z) [IsSmoothDepT g]
  : IsSmoothDepT (f‚äïg) := inferInstance


variable {U V : Type} [Hilbert U] [Hilbert V] (u : U)

-- def Sphere (U : Type) [Hilbert U] := {u : U // ‚à•u‚à•=1}
-- instance : Coe (Sphere U) U := ‚ü®Œª u => u.1‚ü©
-- def Sphere.TangentSpace {U : Type} [Hilbert U] (u : Sphere U) := {v : U // ‚ü™(u : U), v‚ü´ = 0}

-- instance (u : Sphere U) : VecProp (Œª v : U => ‚ü™(u : U), v‚ü´ = 0) := sorry_proof
-- instance (u : Sphere U) : Vec (Sphere.TangentSpace u) :=
--   by unfold Sphere.TangentSpace; infer_instance; done

-- instance : Diff (Sphere U) := ‚ü®Œª u => Sphere.TangentSpace u‚ü©

abbrev Sphere.Carrier (U : Type) [Hilbert U] := {u : U // u‚â†0}
def Sphere.Equiv (x y : Carrier U) : Prop := ‚àÉ s : ‚Ñù, s * x.1 = y.1

def Sphere (U : Type) [Hilbert U] := Quot (Sphere.Equiv (U:=U))

namespace Sphere

  def repr (u : Sphere U) : U := 
    Quot.liftOn u (Œª u => 1/‚à•u.1‚à• * u.1) sorry_proof

  def TangentSpaceProp {U : Type} [Hilbert U] (u : Sphere U) (v : U) : Prop := 
    Quot.liftOn u (Œª u' => ‚ü™u'.1,v‚ü´=0) sorry_proof

  def TangentSpace {U : Type} [Hilbert U] (u : Sphere U) := {v : U // ‚ü™u.repr, v‚ü´ = 0 }

  instance (u : Sphere U) : VecProp (Œª v : U => ‚ü™u.repr, v‚ü´ = 0) := sorry_proof
  instance (u : Sphere U) : Vec (Sphere.TangentSpace u) :=
    by unfold Sphere.TangentSpace; infer_instance; done

  instance : Diff (Sphere U) := ‚ü®Œª u => Sphere.TangentSpace u‚ü©

end Sphere
