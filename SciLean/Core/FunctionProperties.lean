import SciLean.Core.Attributes
import SciLean.Core.Defs
import SciLean.Core.Meta.FunctionProperty
import SciLean.Core.Meta.RewriteBy

import SciLean.Tactic.AutoDiff

namespace SciLean

--------------------------------------------------------------------------------
-- isSmooth
--------------------------------------------------------------------------------

theorem isLin_isSmooth {X Y} [Vec X] [Vec Y] {f : X ‚Üí Y} [inst : IsLin f] : IsSmooth f := inst.isSmooth

syntax "isSmooth" bracketedBinder* (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec isSmooth $extraAssumptions:bracketedBinder* $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "isSmooth"

  let (instanceType, extraBinders) ‚Üê 
    match data.mainArgNum with 
    | 0 => Macro.throwError "Must specify at least one argument!" 
    | 1 => pure (‚Üê `(IsSmooth  $(‚Üê data.mkLambda)), (#[] : Array BracketedBinder))
    | _ => do 
      let (T, mainBinders, lambda) ‚Üê data.mkCompositionLambda
      let TBinders : Array BracketedBinder :=  #[‚Üê `(bracketedBinderF| {$T : Type _}), ‚Üê `(bracketedBinderF| [Vec $T])]
      let mainAssumptions ‚Üê mainBinders.mapM (Œ≤ := BracketedBinder) (Œª b => `(bracketedBinderF| [IsSmooth $b.getIdent] ))
      let instType ‚Üê `(IsSmooth $lambda)
      pure (instType, TBinders.append (mainBinders.append mainAssumptions))

  let proof ‚Üê 
    match proof with
    | none => `(term| by first | apply isLin_isSmooth | infer_instance | (unfold $id; infer_instance); done)
    | some prf =>pure  prf

  let finalCommand ‚Üê
      `(@[fun_prop] theorem $instanceId $data.contextBinders* $extraBinders* $extraAssumptions* : $instanceType := $proof)
  
  return finalCommand 


--------------------------------------------------------------------------------
-- isLin
--------------------------------------------------------------------------------

syntax "isLin" bracketedBinder* (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec isLin $extraAssumptions:bracketedBinder* $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "isLin"

  let (instanceType, extraBinders) ‚Üê 
    match data.mainArgNum with 
    | 0 => Macro.throwError "Must specify at least one argument!" 
    | 1 => pure (‚Üê `(IsLin  $(‚Üê data.mkLambda)), (#[] : Array BracketedBinder))
    | _ => do 
      let (T, mainBinders, lambda) ‚Üê data.mkCompositionLambda
      let TBinders : Array BracketedBinder :=  #[‚Üê `(bracketedBinderF| {$T : Type _}), ‚Üê `(bracketedBinderF| [Vec $T])]
      let mainAssumptions ‚Üê mainBinders.mapM (Œ≤ := BracketedBinder) (Œª b => `(bracketedBinderF| [IsLin $b.getIdent] ))
      let instType ‚Üê `(IsLin $lambda)
      pure (instType, TBinders.append (mainBinders.append mainAssumptions))

  let proof ‚Üê 
    match proof with
    | none => `(term| by first | infer_instance | (unfold $id; infer_instance); done)
    | some prf =>pure  prf

  let finalCommand ‚Üê
      `(@[fun_prop] theorem $instanceId $data.contextBinders* $extraBinders* $extraAssumptions* : $instanceType := $proof)
  
  return finalCommand 


--------------------------------------------------------------------------------
-- hasAdjoint
--------------------------------------------------------------------------------

syntax "hasAdjoint" bracketedBinder* (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      hasAdjoint $extraAssumptions:bracketedBinder* $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "hasAdjoint"

  let (instanceType, extraBinders) ‚Üê 
    match data.mainArgNum with 
    | 0 => Macro.throwError "Must specify at least one argument!" 
    | 1 => pure (‚Üê `(HasAdjoint  $(‚Üê data.mkLambda)), (#[] : Array BracketedBinder))
    | _ => do 
      let (T, mainBinders, lambda) ‚Üê data.mkCompositionLambda
      let TBinders : Array BracketedBinder :=  #[‚Üê `(bracketedBinderF| {$T : Type _}), ‚Üê `(bracketedBinderF| [SemiHilbert $T])]
      let mainAssumptions ‚Üê mainBinders.mapM (Œ≤ := BracketedBinder) (Œª b => `(bracketedBinderF| [HasAdjoint $b.getIdent] ))
      let instType ‚Üê `(HasAdjoint $lambda)
      pure (instType, TBinders.append (mainBinders.append mainAssumptions))

  let proof ‚Üê 
    match proof with
    | none => `(term| by first | infer_instance | (unfold $id; infer_instance); done)
    | some prf =>pure  prf

  let finalCommand ‚Üê
      `(@[fun_prop] theorem $instanceId $data.contextBinders* $extraBinders* $extraAssumptions* : $instanceType := $proof)
  
  return finalCommand 

--------------------------------------------------------------------------------
-- hasAdjDiff
--------------------------------------------------------------------------------

syntax "hasAdjDiff" bracketedBinder* (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      hasAdjDiff $extraAssumptions:bracketedBinder* $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "hasAdjDiff"

  let (instanceType, extraBinders) ‚Üê 
    match data.mainArgNum with 
    | 0 => Macro.throwError "Must specify at least one argument!" 
    | 1 => pure (‚Üê `(HasAdjDiff  $(‚Üê data.mkLambda)), (#[] : Array BracketedBinder))
    | _ => do 
      let (T, mainBinders, lambda) ‚Üê data.mkCompositionLambda
      let TBinders : Array BracketedBinder :=  #[‚Üê `(bracketedBinderF| {$T : Type _}), ‚Üê `(bracketedBinderF| [SemiHilbert $T])]
      let mainAssumptions ‚Üê mainBinders.mapM (Œ≤ := BracketedBinder) (Œª b => `(bracketedBinderF| [HasAdjDiff $b.getIdent] ))
      let instType ‚Üê `(HasAdjDiff $lambda)
      pure (instType, TBinders.append (mainBinders.append mainAssumptions))

  let proof ‚Üê 
    match proof with
    | none => `(term| by apply HasAdjDiff.mk; infer_instance; symdiff; infer_instance; done)
    | some prf =>pure  prf

  let finalCommand ‚Üê
      `(@[fun_prop] theorem $instanceId $data.contextBinders* $extraBinders* $extraAssumptions* : $instanceType := $proof)
  
  return finalCommand 

--------------------------------------------------------------------------------

open Lean.Parser.Tactic.Conv

syntax defOrAbbrev := "def" <|> "abbrev"
syntax byConvTactic := "by" convSeq
syntax termAndProof := ":=" term "by" tacticSeq
syntax termWithProofOrConvTactic := termAndProof <|> byConvTactic

--------------------------------------------------------------------------------
-- ‚àÇ
--------------------------------------------------------------------------------

theorem tangentMap_auto_proof {X Y} [Vec X] [Vec Y] 
  {f : X ‚Üí Y} {df : X ‚Üí X ‚Üí Y} (h : ‚àÇ f = df)
  : ùíØ f = Œª x dx => (f x, df x dx) := by simp[tangentMap, h]; done
  
syntax maybeTangentMap := "ùíØ"
/-- Define differental and/or tangentMap


  Example 1, elementary function
  ```
  function_properties Real.exp (x : ‚Ñù) : ‚Ñù
  argument x
    abbrev ‚àÇ := dx * x.exp by <proof>
  ```
  Using `abbrev ‚àÇ` will simplify `‚àÇ Real.exp x dx` to `dx * x.exp`.

  Using `abbrev ‚àÇ` is usefull when we stating derivatives of elementary functions as they are usually expressible in terms of other elementary functions.

  Example 2, custom compilcated function
  ```
  def foo (x : ‚Ñù ) : ‚Ñù := x + x.exp
  argument x
    def ‚àÇ by symdiff
  ```
  Using `def ‚àÇ` will simplify `‚àÇ foo x dx` to foo.arg_x.diff` which is equal to `dx + dx * x.exp`.

  Using `def ‚àÇ` is usefull when we state derivatives of more complicated functions, as the derivative can be rather compilcated. On the other hand the derivative 


  -/
syntax defOrAbbrev "‚àÇ" (maybeTangentMap)? bracketedBinder* (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      $doa:defOrAbbrev ‚àÇ $[$doTanMap:maybeTangentMap]? $extraAssumptions:bracketedBinder* $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs   := Syntax.mkCApp ``differential #[‚Üê data.mkUncurryLambda]
  let lhsTM := Syntax.mkCApp ``tangentMap #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let diffBinder ‚Üê 
    match dargs with
    | none => data.mainBinders.mapM (Œª b => b.modifyIdent Œª ident => mkIdent <| ident.getId.appendBefore "d") 
              >>= mkProdFunBinder
    | some _ => Macro.throwError "Specifying custom names is currently unsupported!"
  let trailingBinders ‚Üê data.trailingFunBinders

  let funVal ‚Üê data.mkApp

  let (rhs, proof, rhsTM) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $df:term by $prf:tacticSeq) =>
      let rhs ‚Üê `(Œª $mainBinder $diffBinder $trailingBinders* => $df)
      let proof ‚Üê `(by $prf)
      let rhsTM ‚Üê 
        if trailingBinders.size = 0 then
          `(Œª $mainBinder $diffBinder => ($funVal, $df))
        else
          `(Œª $mainBinder $diffBinder => (Œª $trailingBinders* => $funVal, Œª  $trailingBinders* => $df))      
      pure (rhs, proof, rhsTM)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      if doTanMap.isSome then
        Macro.throwError "Using conv tactic to generate tangentMap is currently unsupported!"
      let rhsTM ‚Üê `($lhs rewrite_by $c)
      pure (rhs, proof, rhsTM)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "diff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "diff_simp"

  let diff_command ‚Üê   
    match doa with
    | `(defOrAbbrev| def) => 
      `(def $definition_name $data.contextBinders* := $rhs
        @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $(data.mkAppContext definition_name) := $proof)
    | `(defOrAbbrev| abbrev) =>
      `(@[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $rhs := $proof)
    | _ => Macro.throwUnsupported

  if doTanMap.isNone then
    return diff_command

  let tangentMapProof := Syntax.mkCApp ``tangentMap_auto_proof #[data.mkAppContext simp_theorem_name]

  let definition_name   := mkIdent $ data.funPropNamespace.append "tangentMap"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "tangentMap_simp"

  let tangentMap_command : TSyntax `command ‚Üê 
    match doa with
    | `(defOrAbbrev| def) =>
      `(def $definition_name $data.contextBinders* := $rhsTM
        @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhsTM = $(data.mkAppContext definition_name) := $proof)
    | `(defOrAbbrev| abbrev) =>
      `(@[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhsTM = $rhsTM := $tangentMapProof)
    | _ => Macro.throwUnsupported

  `($diff_command:command
    $tangentMap_command:command)


--------------------------------------------------------------------------------
-- ùíØ
--------------------------------------------------------------------------------


syntax defOrAbbrev "ùíØ" bracketedBinder* (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      $doa:defOrAbbrev ùíØ $extraAssumptions:bracketedBinder* $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``tangentMap #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let diffBinder ‚Üê 
    match dargs with
    | none => data.mainBinders.mapM (Œª b => b.modifyIdent Œª ident => mkIdent <| ident.getId.appendBefore "d") 
              >>= mkProdFunBinder
    | some _ => Macro.throwError "Specifying custom names is currently unsupported!"
  let trailingBinders ‚Üê data.trailingFunBinders

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $Tf:term by $proof:tacticSeq) =>
      let rhs ‚Üê 
        `(Œª $mainBinder $diffBinder => $Tf)
      let proof ‚Üê `(by $proof)
      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "tangentMap"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "tangentMap_simp"

  match doa with
  | `(defOrAbbrev| def) =>
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  | `(defOrAbbrev| abbrev) =>
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  | _ => Macro.throwUnsupported


--------------------------------------------------------------------------------
-- ‚Ä†
--------------------------------------------------------------------------------

syntax defOrAbbrev "‚Ä†" bracketedBinder* (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      $doa:defOrAbbrev ‚Ä† $extraAssumptions:bracketedBinder* $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``adjoint #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let x' := mkIdent s!"{data.mainArgString}'"
  let adjBinder : TSyntax ``funBinder ‚Üê `(($x'))

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $ft:term by $prf:tacticSeq) =>
      let mainType ‚Üê data.mainArgType
      let rhs ‚Üê `(Œª $adjBinder => (($ft) : $mainType))
      let proof ‚Üê `(by $prf)

      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)

      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "adjoint"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "adjoint_simp"

  match doa with
  | `(defOrAbbrev| def) =>
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  | `(defOrAbbrev| abbrev) =>    
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  | _ => Macro.throwUnsupported

--------------------------------------------------------------------------------

theorem revDiff_auto_proof {X Y} [SemiHilbert X] [SemiHilbert Y] 
  {f : X ‚Üí Y} {df' : X ‚Üí Y ‚Üí X} (h : ‚àÇ‚Ä† f = df')
  : ‚Ñõ f = Œª x => (f x, Œª dy => df' x dy) := by simp[reverseDifferential, h]; done


syntax maybeRevDiff := "‚Ñõ"
syntax defOrAbbrev "‚àÇ‚Ä†" (maybeRevDiff)? bracketedBinder* (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      $doa:defOrAbbrev ‚àÇ‚Ä† $[$doRevDiff:maybeRevDiff]? $extraAssumptions:bracketedBinder* $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``adjointDifferential #[‚Üê data.mkUncurryLambda]
  let lhsRD := Syntax.mkCApp ``reverseDifferential #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let x' := mkIdent s!"d{data.mainArgString}'"
  let adjBinder : TSyntax ``funBinder ‚Üê 
    match retType with 
    | .some T => `(($x' : $T))
    | .none => `(($x'))

  let funVal ‚Üê data.mkApp

  dbg_trace (‚Üê data.mainArgType).raw.prettyPrint

  let (rhs, proof, rhsRD, proofRD) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $ft:term by $prf:tacticSeq) =>
      let mainType ‚Üê data.mainArgType
      let rhs ‚Üê `(Œª $mainBinder $adjBinder => (($ft) : $mainType))
      let proof ‚Üê `(by $prf)

      let rhsRD ‚Üê `(Œª $mainBinder => ($funVal, Œª $adjBinder => (($ft) : $mainType)))
      let proofRD ‚Üê `(by $prf)

      pure (rhs, proof, rhsRD, proofRD)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)

      if doRevDiff.isSome then
        Macro.throwError "Using conv tactic to generate reverse differential is currently unsupported!"
      let rhsRD ‚Üê `($lhs rewrite_by $c)
      let proofRD ‚Üê `(by apply AutoImpl.impl_eq_spec)

      pure (rhs, proof, rhsRD, proofRD)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "adjDiff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "adjDiff_simp"

  let adjDiff_command ‚Üê 
    match doa with
    | `(defOrAbbrev| def) =>
      `(def $definition_name $data.contextBinders* := $rhs
        @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $(data.mkAppContext definition_name) := $proof)
    | `(defOrAbbrev| abbrev) =>      
      `(@[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $rhs := $proof)
    | _ => Macro.throwUnsupported 


  if doRevDiff.isNone then
    return adjDiff_command


  let revDiffProof := Syntax.mkCApp ``revDiff_auto_proof #[data.mkAppContext simp_theorem_name]

  let definition_name   := mkIdent $ data.funPropNamespace.append "revDiff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "revDiff_simp"

  let revDiff_command ‚Üê 
    match doa with
    | `(defOrAbbrev| def) => 
      `(def $definition_name $data.contextBinders* := $rhsRD
        @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhsRD = $(data.mkAppContext definition_name) := $proofRD)
    | `(defOrAbbrev| abbrev) =>      
      `(@[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhsRD = $rhsRD := $revDiffProof)
    | _ => Macro.throwUnsupported 

  `($adjDiff_command:command
    $revDiff_command:command)
--------------------------------------------------------------------------------


syntax defOrAbbrev "‚Ñõ" bracketedBinder* (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? 
    argument $arg:argSpec 
      $doa:defOrAbbrev ‚Ñõ $extraAssumptions:bracketedBinder* $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``reverseDifferential #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  dbg_trace (‚Üê data.mainArgType).raw.prettyPrint

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $Rf:term by $proof:tacticSeq) =>
      let mainType ‚Üê data.mainArgType
      let rhs ‚Üê `(Œª $mainBinder => $Rf)
      let proof ‚Üê `(by $proof)
      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "revDiff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "revDiff_simp"

  dbg_trace lhs.raw.prettyPrint
  dbg_trace rhs.raw.prettyPrint

  match doa with
  | `(defOrAbbrev| def) =>
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  | `(defOrAbbrev| abbrev) =>
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* $extraAssumptions* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  | _ => Macro.throwUnsupported


-- variable [SemiHilbert X] [Hilbert X] 
