import SciLean.Core.Attributes
import SciLean.Core.Defs
import SciLean.Core.Meta.FunctionProperty
import SciLean.Core.Meta.RewriteBy

import SciLean.Tactic.AutoDiff

namespace SciLean

--------------------------------------------------------------------------------
-- isSmooth
--------------------------------------------------------------------------------

syntax "isSmooth" (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec isSmooth $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "isSmooth"

  let instanceType ‚Üê `(IsSmoothN $data.mainArgNumLit $(‚Üê data.mkLambda))
  let finalCommand ‚Üê
    match proof with
    | none =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := by first | infer_instance | apply IsSmoothN.mk | (unfold $id; apply IsSmoothN.mk); done)
    | some proof =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := $proof)
  
  return finalCommand 


--------------------------------------------------------------------------------
-- isLin
--------------------------------------------------------------------------------

syntax "isLin" (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec isLin $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "isLin"

  let instanceType ‚Üê `(IsLinN $data.mainArgNumLit $(‚Üê data.mkLambda))
  let finalCommand ‚Üê
    match proof with
    | none =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := by first | infer_instance | apply IsLinN.mk | (unfold $id; apply IsLinN.mk); done)
    | some proof =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := $proof)
  
  return finalCommand 


--------------------------------------------------------------------------------
-- hasAdjoint
--------------------------------------------------------------------------------

syntax "hasAdjoint" (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec hasAdjoint $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "hasAdjoint"

  let instanceType ‚Üê `(HasAdjointN $data.mainArgNumLit $(‚Üê data.mkLambda))
  let finalCommand ‚Üê
    match proof with
    | none =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := by first | infer_instance | apply HasAdjointN.mk | (unfold $id; apply HasAdjointN.mk); done)
    | some proof =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := $proof)
  
  return finalCommand 

--------------------------------------------------------------------------------
-- hasAdjDiff
--------------------------------------------------------------------------------

theorem HasAdjDiffN.mk' {X Y : Type} {Xs Y' : Type} [SemiHilbert Xs] [SemiHilbert Y']
  {n : Nat} {f : X ‚Üí Y} [Prod.Uncurry n (X ‚Üí Y) Xs Y'] [IsSmoothNT n f]
  : (‚àÄ x, HasAdjointT $ ‚àÇ (uncurryN n f) x) ‚Üí HasAdjDiffN n f
  := Œª h => by 
    have : HasAdjDiffNT n f := by constructor; constructor; infer_instance; apply h
    apply HasAdjDiffN.mk

syntax "hasAdjDiff" (":=" term)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec hasAdjDiff $[:= $proof:term]?) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg

  let instanceId := mkIdent $ data.funPropNamespace.append "hasAdjDiff"

  let instanceType ‚Üê `(HasAdjDiffN $data.mainArgNumLit $(‚Üê data.mkLambda))
  let finalCommand ‚Üê
    match proof with
    | none =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := by apply HasAdjDiffN.mk'; symdiff; infer_instance; done)
    | some proof =>
      `(instance (priority:=mid) $instanceId $data.contextBinders* : $instanceType := $proof)
  
  return finalCommand 

--------------------------------------------------------------------------------

open Lean.Parser.Tactic.Conv

syntax defOrAbbrev := "def" <|> "abbrev"
syntax byConvTactic := "by" convSeq
syntax termAndProof := ":=" term "by" tacticSeq
syntax termWithProofOrConvTactic := termAndProof <|> byConvTactic

--------------------------------------------------------------------------------
-- ‚àÇ
--------------------------------------------------------------------------------

syntax defOrAbbrev "‚àÇ" (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec $doa:defOrAbbrev ‚àÇ $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``differential #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let diffBinder ‚Üê 
    match dargs with
    | none => data.mainBinders.mapM (Œª b => b.modifyIdent Œª ident => mkIdent <| ident.getId.appendBefore "d") 
              >>= mkProdFunBinder
    | some _ => Macro.throwError "Specifying custom names is currently unsupported!"
  let trailingBinders ‚Üê data.trailingFunBinders

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $df:term by $proof:tacticSeq) =>
      let rhs ‚Üê `(Œª $mainBinder $diffBinder $trailingBinders* => $df)
      let proof ‚Üê `(by $proof)
      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "diff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "diff_simp"

  if doa.raw[0].getAtomVal == "def" then
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  else if doa.raw[0].getAtomVal == "abbrev" then
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  else
    Macro.throwUnsupported

--------------------------------------------------------------------------------
-- ùíØ
--------------------------------------------------------------------------------


syntax defOrAbbrev "ùíØ" (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec $doa:defOrAbbrev ùíØ $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``tangentMap #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let diffBinder ‚Üê 
    match dargs with
    | none => data.mainBinders.mapM (Œª b => b.modifyIdent Œª ident => mkIdent <| ident.getId.appendBefore "d") 
              >>= mkProdFunBinder
    | some _ => Macro.throwError "Specifying custom names is currently unsupported!"
  let trailingBinders ‚Üê data.trailingFunBinders

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $df:term by $proof:tacticSeq) =>
      let rhs ‚Üê `(Œª $mainBinder $diffBinder $trailingBinders* => $df)
      let proof ‚Üê `(by $proof)
      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "diff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "diff_simp"

  if doa.raw[0].getAtomVal == "def" then
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  else if doa.raw[0].getAtomVal == "abbrev" then
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  else
    Macro.throwUnsupported


--------------------------------------------------------------------------------
-- ‚Ä†
--------------------------------------------------------------------------------

syntax defOrAbbrev "‚Ä†" (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec $doa:defOrAbbrev ‚Ä† $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``adjoint #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let x' := mkIdent s!"{data.mainArgString}'"
  let adjBinder : TSyntax ``funBinder ‚Üê `(($x'))

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $ft:term by $proof:tacticSeq) =>
      let mainType ‚Üê data.mainArgType
      let rhs ‚Üê `(Œª $adjBinder => (($ft) : $mainType))
      let proof ‚Üê `(by $proof)
      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "adjoint"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "adjoint_simp"

  if doa.raw[0].getAtomVal == "def" then
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  else if doa.raw[0].getAtomVal == "abbrev" then
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  else
    Macro.throwUnsupported

--------------------------------------------------------------------------------


syntax defOrAbbrev "‚àÇ‚Ä†" (mainArg)? (termWithProofOrConvTactic)? : argProp

open Lean Parser.Term in
macro_rules
| `(function_property $id:ident $parms:bracketedBinder* $[: $retType:term]? argument $arg:argSpec $doa:defOrAbbrev ‚àÇ‚Ä† $[$dargs:mainArg]? $tpc:termWithProofOrConvTactic) => do

  let data ‚Üê FunctionPropertyData.parse id parms retType arg 

  let lhs := Syntax.mkCApp ``adjointDifferential #[‚Üê data.mkUncurryLambda]

  let mainBinder ‚Üê data.mainFunBinder

  let x' := mkIdent s!"d{data.mainArgString}'"
  let adjBinder : TSyntax ``funBinder ‚Üê `(($x'))

  dbg_trace (‚Üê data.mainArgType).raw.prettyPrint

  let (rhs, proof) ‚Üê 
    match tpc with
    | `(termWithProofOrConvTactic| := $ft:term by $proof:tacticSeq) =>
      let mainType ‚Üê data.mainArgType
      let rhs ‚Üê `(Œª $mainBinder $adjBinder => (($ft) : $mainType))
      let proof ‚Üê `(by $proof)
      pure (rhs, proof)

    | `(termWithProofOrConvTactic| by $c:convSeq) => 
      let rhs ‚Üê `($lhs rewrite_by $c)
      let proof ‚Üê `(by apply AutoImpl.impl_eq_spec)
      pure (rhs, proof)

    | _ =>  Macro.throwUnsupported

  let definition_name   := mkIdent $ data.funPropNamespace.append "adjDiff"
  let simp_theorem_name := mkIdent $ data.funPropNamespace.append "adjDiff_simp"

  dbg_trace lhs.raw.prettyPrint
  dbg_trace rhs.raw.prettyPrint

  if doa.raw[0].getAtomVal == "def" then
    `(
    def $definition_name $data.contextBinders* := $rhs
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $(data.mkAppContext definition_name) := $proof
    #print $definition_name
    #check $simp_theorem_name
    )
  else if doa.raw[0].getAtomVal == "abbrev" then
    `(
    @[diff] theorem $simp_theorem_name $data.contextBinders* : $lhs = $rhs := $proof
    #check $simp_theorem_name
    )
  else
    Macro.throwUnsupported


-- variable [SemiHilbert X] [Hilbert X] 
